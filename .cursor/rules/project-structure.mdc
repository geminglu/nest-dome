# NestJS 企业级中后台管理系统

## 项目概述

本项目是一个基于 NestJS 框架开发的企业级中后台管理系统，提供完整的用户认证、权限管理、文件上传、系统管理等功能。采用模块化架构设计，支持高并发、高可扩展性。

## 技术栈

### 核心框架

- **NestJS**: 企业级 Node.js 框架
- **TypeScript**: 类型安全的 JavaScript 超集
- **TypeORM**: 数据库 ORM 框架
- **MySQL**: 关系型数据库

### 认证与安全

- **JWT**: JSON Web Token 认证
- **Passport**: 身份验证中间件
- **bcrypt**: 密码加密
- **class-validator**: 数据验证

### 文档与测试

- **Swagger**: API 文档生成
- **Jest**: 单元测试框架
- **Supertest**: 端到端测试

### 工具与库

- **Winston**: 日志管理
- **Multer**: 文件上传
- **Nodemailer**: 邮件发送
- **Cron**: 定时任务
- **SVG Captcha**: 图形验证码

## 项目结构

```text
nest-dome/
├── src/                          # 主源码目录
│   ├── main.ts                   # 应用入口文件
│   ├── app.module.ts             # 主模块，整合各业务模块
│   ├── app.controller.ts         # 主控制器
│   ├── app.service.ts            # 主服务
│   │
│   ├── api/                      # 业务模块目录
│   │   ├── auth/                 # 认证模块
│   │   │   ├── auth.controller.ts
│   │   │   ├── auth.service.ts
│   │   │   ├── auth.module.ts
│   │   │   └── dto/
│   │   │       └── auth.dto.ts
│   │   │
│   │   ├── user/                 # 用户管理模块
│   │   │   ├── user.controller.ts
│   │   │   ├── user.service.ts
│   │   │   ├── user.module.ts
│   │   │   └── dto/
│   │   │       ├── userDto.ts
│   │   │       ├── query-user-dto.ts
│   │   │       └── update-user.dto.ts
│   │   │
│   │   ├── system/               # 系统管理模块
│   │   │   ├── system.controller.ts
│   │   │   ├── system.service.ts
│   │   │   ├── system.module.ts
│   │   │   ├── dept/             # 部门管理
│   │   │   │   ├── dept.controller.ts
│   │   │   │   └── dept.service.ts
│   │   │   ├── role/             # 角色管理
│   │   │   │   ├── role.controller.ts
│   │   │   │   └── role.service.ts
│   │   │   └── dto/
│   │   │       ├── dept.dto.ts
│   │   │       ├── role.dto.ts
│   │   │       ├── create-system.dto.ts
│   │   │       └── update-system.dto.ts
│   │   │
│   │   └── upload/               # 文件上传模块
│   │       ├── upload.controller.ts
│   │       ├── upload.service.ts
│   │       ├── upload.module.ts
│   │       └── dto/
│   │           ├── create-upload.dto.ts
│   │           └── update-upload.dto.ts
│   │
│   ├── entities/                 # TypeORM 实体定义
│   │   ├── user.entities.ts      # 用户实体
│   │   ├── SysDept.ts           # 部门实体
│   │   ├── sysRole.etities.ts   # 角色实体
│   │   ├── systemMenun.etities.ts # 菜单实体
│   │   ├── sysUserRole.etities.ts # 用户角色关联
│   │   ├── sysRoleMenu.etities.ts # 角色菜单关联
│   │   ├── uploadFile.entities.ts # 文件上传实体
│   │   ├── loginLog.netities.ts # 登录日志实体
│   │   ├── dictionary.netities.ts # 字典实体
│   │   ├── dictionaryInfo.netities.ts # 字典信息实体
│   │   └── graphicCode.netities.ts # 图形验证码实体
│   │
│   ├── common/                   # 通用工具
│   │   ├── response.ts           # 响应拦截器
│   │   ├── filter.ts             # 异常过滤器
│   │   └── logger.ts             # 日志配置
│   │
│   ├── config/                   # 配置文件
│   │   ├── index.ts              # 主配置
│   │   ├── dbConfig.ts           # 数据库配置
│   │   └── emailConfig.ts        # 邮件配置
│   │
│   ├── utils/                    # 工具函数
│   │   ├── index.ts              # 工具函数集合
│   │   ├── constant.ts           # 常量定义
│   │   ├── api.Response.ts       # API 响应工具
│   │   ├── result.ts             # 结果封装
│   │   ├── validate.ts           # 验证工具
│   │   └── is.ts                 # 类型判断工具
│   │
│   ├── guard/                    # 守卫
│   │   └── auth/
│   │       ├── auth.guard.ts     # 认证守卫
│   │       └── roles.ts          # 角色守卫
│   │
│   ├── decorators/               # 自定义装饰器
│   │   ├── public.decorator.ts   # 公开接口装饰器
│   │   └── roles.decorator.ts    # 角色装饰器
│   │
│   ├── middleware/               # 中间件
│   │   └── logger.ts             # 日志中间件
│   │
│   ├── types/                    # 类型定义
│   │   ├── request.d.ts          # 请求类型扩展
│   │   └── user.ts               # 用户类型定义
│   │
│   ├── const/                    # 常量定义
│   │   ├── index.ts              # 常量导出
│   │   └── regexp.ts             # 正则表达式常量
│   │
│   └── dto/                      # 公共数据传输对象
│       └── index.ts              # DTO 导出
│
├── test/                         # 测试代码目录
│   ├── app.e2e-spec.ts          # 端到端测试
│   └── jest-e2e.json            # Jest 端到端配置
│
├── sql/                          # 数据库脚本
│   └── application.sql           # 应用数据库脚本
│
├── uploads/                      # 文件上传目录
├── logs/                         # 日志文件目录
├── temp/                         # 临时文件目录
│
├── package.json                  # 项目依赖配置
├── tsconfig.json                 # TypeScript 配置
├── nest-cli.json                # NestJS CLI 配置
├── eslint.config.mjs            # ESLint 配置
├── .prettierrc                  # Prettier 配置
├── Dockerfile                   # Docker 配置
└── README.md                    # 项目说明文档
```

## 核心功能模块

### 1. 用户管理 (User Module)

- 用户注册、登录、注销
- 用户信息管理
- 密码重置
- 用户状态管理

### 2. 认证模块 (Auth Module)

- JWT 令牌生成与验证
- 登录认证
- 权限验证
- 图形验证码

### 3. 系统管理 (System Module)

- **部门管理**: 组织架构管理，支持树形结构
- **角色管理**: 角色权限分配
- **菜单管理**: 系统菜单配置
- **字典管理**: 系统字典维护

### 4. 文件上传 (Upload Module)

- 文件上传与下载
- 文件类型验证
- 文件存储管理

## 开发规范

### 代码组织

1. **模块化设计**: 每个功能模块独立，包含 controller、service、module
2. **DTO 模式**: 使用数据传输对象进行数据验证和类型安全
3. **实体映射**: 使用 TypeORM 实体进行数据库操作
4. **依赖注入**: 充分利用 NestJS 的依赖注入特性

### 命名规范

- **文件命名**: 使用 kebab-case (如: `user.controller.ts`)
- **类命名**: 使用 PascalCase (如: `UserController`)
- **方法命名**: 使用 camelCase (如: `getUserById`)
- **常量命名**: 使用 UPPER_SNAKE_CASE (如: `API_VERSION`)

### API 设计

- **RESTful 风格**: 遵循 REST API 设计原则
- **版本控制**: 支持 API 版本管理
- **统一响应**: 使用统一的响应格式
- **错误处理**: 全局异常过滤器处理错误

### 安全规范

- **输入验证**: 使用 class-validator 进行数据验证
- **SQL 注入防护**: 使用 TypeORM 参数化查询
- **XSS 防护**: 输入输出过滤
- **CORS 配置**: 跨域资源共享配置

## 环境配置

### 开发环境

```bash
# 安装依赖
npm install

# 启动开发服务器
npm run start:dev

# 运行测试
npm run test

# 代码检查
npm run lint
```

### 生产环境

```bash
# 构建项目
npm run build

# 启动生产服务器
npm run start:prod
```

## 数据库设计

### 核心表结构

- **users**: 用户信息表
- **sys_dept**: 部门信息表
- **sys_role**: 角色信息表
- **sys_menu**: 菜单信息表
- **sys_user_role**: 用户角色关联表
- **sys_role_menu**: 角色菜单关联表
- **upload_files**: 文件上传记录表
- **login_logs**: 登录日志表
- **dictionaries**: 字典表
- **dictionary_infos**: 字典详情表

## 部署说明

### Docker 部署

项目包含 Dockerfile，支持容器化部署：

```bash
# 构建镜像
docker build -t nest-dome .

# 运行容器
docker run -p 3000:3000 nest-dome
```

### 环境变量

主要环境变量配置：

- `NODE_ENV`: 运行环境 (development/production)
- `PORT`: 服务端口 (默认: 3000)
- `DB_HOST`: 数据库主机
- `DB_PORT`: 数据库端口
- `DB_USERNAME`: 数据库用户名
- `DB_PASSWORD`: 数据库密码
- `DB_DATABASE`: 数据库名称
- `JWT_SECRET`: JWT 密钥
- `UPLOAD_PATH`: 文件上传路径

## 相关项目

- **前端项目**: [vite-vue3-dome](https://github.com/geminglu/vite-vue3-dome)
- **API 文档**: <http://localhost:3000/api-docs>
- **健康检查**: <http://localhost:3000/health>

## 贡献指南

1. Fork 项目
2. 创建功能分支 (`git checkout -b feature/AmazingFeature`)
3. 提交更改 (`git commit -m 'Add some AmazingFeature'`)
4. 推送到分支 (`git push origin feature/AmazingFeature`)
5. 打开 Pull Request

## 许可证

本项目采用 UNLICENSED 许可证。

- [test/](mdc:test)：测试代码目录。
- [README.md](mdc:README.md)：项目简介与启动说明。

各业务模块均采用模块化设计，便于扩展和维护。
